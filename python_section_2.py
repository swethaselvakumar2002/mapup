# -*- coding: utf-8 -*-
"""python_section_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MiTLfUGzjq57viFErt67mUvfm58ahiom

**Question 9: Distance Matrix Calculation**
"""

import pandas as pd
import numpy as np

def calculate_distance_matrix(file_path):
    # Load dataset
    df = pd.read_csv("/content/dataset-2.csv")

    ids = pd.unique(df[['id_start', 'id_end']].values.ravel('K'))
    distance_matrix = pd.DataFrame(np.inf, index=ids, columns=ids)
    np.fill_diagonal(distance_matrix.values, 0)

    for _, row in df.iterrows():
        start, end, distance = row['id_start'], row['id_end'], row['distance']
        distance_matrix.at[start, end] = distance
        distance_matrix.at[end, start] = distance

    #  Floyd-Warshall algorithm
    for k in ids:
        for i in ids:
            for j in ids:
                if distance_matrix.at[i, j] > distance_matrix.at[i, k] + distance_matrix.at[k, j]:
                    distance_matrix.at[i, j] = distance_matrix.at[i, k] + distance_matrix.at[k, j]

    return distance_matrix

# Example
matrix = calculate_distance_matrix('dataset-2.csv')
print(matrix)

"""**Question 10: Unroll Distance Matrix**"""

import pandas as pd

def unroll_distance_matrix(distance_matrix):
    rows = []

    for id_start in distance_matrix.index:
        for id_end in distance_matrix.columns:
            if id_start != id_end:
                distance = distance_matrix.at[id_start, id_end]
                rows.append({'id_start': id_start, 'id_end': id_end, 'distance': distance})

    unrolled_df = pd.DataFrame(rows)

    return unrolled_df

# Example
# Assume 'matrix' is the DataFrame obtained from calculate_distance_matrix
unrolled_df = unroll_distance_matrix(matrix)
print(unrolled_df)

"""**Question 11: Finding IDs within Percentage Threshold**"""

import pandas as pd

def find_ids_within_ten_percentage_threshold(df, reference_id):
    reference_distances = df[df['id_start'] == reference_id]

    if reference_distances.empty:
        return []
    average_distance = reference_distances['distance'].mean()

    lower_bound = average_distance * 0.9
    upper_bound = average_distance * 1.1
    ids_within_threshold = df[(df['distance'] >= lower_bound) & (df['distance'] <= upper_bound)]
    result_ids = sorted(ids_within_threshold['id_start'].unique())

    return result_ids

# Example
result = find_ids_within_ten_percentage_threshold(unrolled_df, 1001400)
print(result)

"""**Question 12: Calculate Toll Rate**"""

import pandas as pd

def calculate_toll_rate(df):
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }
    for vehicle_type, coefficient in rate_coefficients.items():
        df[vehicle_type] = df['distance'] * coefficient

    return df

# Example
toll_rates_df = calculate_toll_rate(unrolled_df)
print(toll_rates_df)

"""**Question 13: Calculate Time-Based Toll Rates**"""

import pandas as pd
import datetime

def calculate_time_based_toll_rates(df):
    days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

    time_ranges = {
        'weekday': [
            (datetime.time(0, 0), datetime.time(10, 0), 0.8),
            (datetime.time(10, 0), datetime.time(18, 0), 1.2),
            (datetime.time(18, 0), datetime.time(23, 59, 59), 0.8)
        ],
        'weekend': [
            (datetime.time(0, 0), datetime.time(23, 59, 59), 0.7)
        ]
    }
    modified_rows = []

    for (id_start, id_end) in df[['id_start', 'id_end']].drop_duplicates().itertuples(index=False):
        for day in days_of_week:
            for start_time in [datetime.time(hour) for hour in range(24)]:  # Full day from 00:00 to 23:59
                end_time = start_time

                if day in days_of_week[:5]:  # Weekdays
                    for start_range, end_range, factor in time_ranges['weekday']:
                        if start_time >= start_range and start_time < end_range:
                            discount_factor = factor
                            break
                    else:
                        discount_factor = 1.0
                else:
                    discount_factor = time_ranges['weekend'][0][2]

                distances = df[(df['id_start'] == id_start) & (df['id_end'] == id_end)]
                for _, row in distances.iterrows():
                    toll_rates = {
                        'moto': row['moto'] * discount_factor,
                        'car': row['car'] * discount_factor,
                        'rv': row['rv'] * discount_factor,
                        'bus': row['bus'] * discount_factor,
                        'truck': row['truck'] * discount_factor,
                    }

                    modified_rows.append({
                        'id_start': id_start,
                        'id_end': id_end,
                        'start_day': day,
                        'start_time': start_time,
                        'end_day': day,
                        'end_time': end_time,
                        **toll_rates
                    })
    result_df = pd.DataFrame(modified_rows)

    return result_df

# Example
time_based_toll_rates_df = calculate_time_based_toll_rates(toll_rates_df)
print(time_based_toll_rates_df)